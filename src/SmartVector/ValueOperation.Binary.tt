<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var operations = new (string, Func<string, string, string>, bool) [] {
    ("Add"            , (x, y) =>$"{x} + {y}", false),
    ("AddChecked"     , (x, y) =>$"{x} + {y}", true ),
    ("Subtract"       , (x, y) =>$"{x} - {y}", false),
    ("SubtractChecked", (x, y) =>$"{x} - {y}", true ),
    ("Multiply"       , (x, y) =>$"{x} * {y}", false),
    ("MultiplyChecked", (x, y) =>$"{x} * {y}", true ),
    ("Divide"         , (x, y) =>$"{x} / {y}", false),
    ("Modulo"         , (x, y) =>$"{x} % {y}", false),
    ("BitwiseOr"      , (x, y) =>$"{x} | {y}", false),
    ("BitwiseAnd"     , (x, y) =>$"{x} & {y}", false),
    ("BitwiseXor"     , (x, y) =>$"{x} ^ {y}", false),
};
var types = new TypeDef [] {
//              type       x+y    x-y    x*y    x/y    x%y    x|y    x&y    x^y
    new TypeDef("bool"   , false, false, false, false, false, true , true , true ),
    new TypeDef("byte"   , true , true , true , true , true , true , true , true ),
    new TypeDef("ushort" , true , true , true , true , true , true , true , true ),
    new TypeDef("uint"   , true , true , true , true , true , true , true , true ),
    new TypeDef("ulong"  , true , true , true , true , true , true , true , true ),
    new TypeDef("sbyte"  , true , true , true , true , true , true , true , true ),
    new TypeDef("short"  , true , true , true , true , true , true , true , true ),
    new TypeDef("int"    , true , true , true , true , true , true , true , true ),
    new TypeDef("long"   , true , true , true , true , true , true , true , true ),
    new TypeDef("float"  , true , true , true , true , true , false, false, false),
    new TypeDef("double" , true , true , true , true , true , false, false, false),
    new TypeDef("decimal", true , true , true , true , true , false, false, false),
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System.Runtime.CompilerServices;
namespace SmartVector;

partial class ValueOperation
{
<# foreach(var (opname, op, isChecked) in operations) { #>

    /// <summary> Operates <c><#=opname#></c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T <#=opname#><T>(in T x, in T y)
    {
        <#=isChecked ? "checked" : "unchecked"#>
        {
<# foreach(var type in types) { #>
            if(typeof(T) == typeof(<#=type.Name#>))
            {
<# if(type.IsSupported[opname]) { #>
                var z = (<#=type#>)(<#=op($"Unsafe.As<T, {type}>(ref Unsafe.AsRef(x))", $"Unsafe.As<T, {type}>(ref Unsafe.AsRef(y))")#>);
                return Unsafe.As<<#=type#>, T>(ref z);
<# } else { #>
                throw new NotSupportedException();
<# } #>
            }
<# } #>
        }
        return Cache<T>.Instance.<#=opname#>(x, y);
    }

<# } #>
}

<#+
public class TypeDef
{
    public string Name { get; }
    public Dictionary<string, bool> IsSupported { get; }

    public TypeDef(string name, bool add, bool sub, bool mul, bool div, bool mod, bool or_, bool and, bool xor)
    {
        Name       = name;
        IsSupported = new Dictionary<string, bool>
        {
            { "Add"            , add },
            { "AddChecked"     , add },
            { "Subtract"       , sub },
            { "SubtractChecked", sub },
            { "Multiply"       , mul },
            { "MultiplyChecked", mul },
            { "Divide"         , div },
            { "Modulo"         , mod },
            { "BitwiseOr"      , or_ },
            { "BitwiseAnd"     , and },
            { "BitwiseXor"     , xor },
        };
    }

    public override string ToString() => Name;
}
#>
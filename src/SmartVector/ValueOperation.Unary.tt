<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var operations = new (string, Func<string, string>) [] {
    ("UnaryPlus" , x =>$"+{x}"),
    ("UnaryMinus", x =>$"-{x}"),
    ("Not"       , x =>$"!{x}"),
    ("Complement", x =>$"~{x}"),
};
var types = new TypeDef [] {
//              type       +x     -x     !x     ~x
    new TypeDef("bool"   , false, false, true , false),
    new TypeDef("byte"   , false, false, false, true ),
    new TypeDef("ushort" , false, false, false, true ),
    new TypeDef("uint"   , false, false, false, true ),
    new TypeDef("ulong"  , false, false, false, true ),
    new TypeDef("sbyte"  , true , true , false, true ),
    new TypeDef("short"  , true , true , false, true ),
    new TypeDef("int"    , true , true , false, true ),
    new TypeDef("long"   , true , false, false, true ),
    new TypeDef("float"  , true , true , false, false),
    new TypeDef("double" , true , true , false, false),
    new TypeDef("decimal", true , true , false, false),
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Runtime.CompilerServices;
namespace SmartVector;

partial class ValueOperation
{
<# foreach(var (opname, op) in operations) { #>

    /// <summary> Operates <c><#=opname#></c> unaly operation. </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="x"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException" />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T <#=opname#><T>(in T x)
    {
<# foreach(var type in types) { #>
        if(typeof(T) == typeof(<#=type.Name#>))
        {
<# if(type.IsSupported[opname]) { #>
            var z = (<#=type#>)(<#=op($"Unsafe.As<T, {type}>(ref Unsafe.AsRef(x))")#>);
            return Unsafe.As<<#=type#>, T>(ref z);
<# } else { #>
            throw new NotSupportedException();
<# } #>
        }
<# } #>
        return Cache<T>.Instance.<#=opname#>(x);
    }

<# } #>
}
<#+
public class TypeDef
{
    public string Name { get; }
    public Dictionary<string, bool> IsSupported { get; }

    public TypeDef(string name, bool unaryPlus, bool unaryMinus, bool not, bool complement)
    {
        Name       = name      ;
        IsSupported = new Dictionary<string, bool>
        {
            { "UnaryPlus" , unaryPlus  },
            { "UnaryMinus", unaryMinus },
            { "Not"       , not        },
            { "Complement", complement },
        };
    }

    public override string ToString() => Name;
}
#>
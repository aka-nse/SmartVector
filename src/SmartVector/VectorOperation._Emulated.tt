<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var normalBinOps = new []{ "Add", "Subtract", "Multiply", "Divide", "BitwiseAnd", "BitwiseOr", "BitwiseXor", };
var compareOps = new []{ "Equals", "LessThan", "LessThanOrEquals", "GreaterThan", "GreaterThanOrEquals", };
#>
using System;
using System.Collections.Generic;
using System.Text;

namespace SmartVector
{
    partial class VectorOperation
    {
        partial class _Emulated
        {
<# foreach(var op in normalBinOps) { #>
            protected internal override void <#=op#>Core<T>(T x, ReadOnlySpan<T> y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x, y[i]);
            }

            protected internal override void <#=op#>Core<T>(ReadOnlySpan<T> x, T y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x[i], y);
            }

            protected internal override void <#=op#>Core<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x[i], y[i]);
            }

<# } #>
/*
<# foreach(var op in compareOps) { #>
            protected internal override void <#=op#>Core<T>(T x, ReadOnlySpan<T> y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x, y[i]);
            }

            protected internal override void <#=op#>Core<T>(ReadOnlySpan<T> x, T y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x[i], y);
            }

            protected internal override void <#=op#>Core<T>(ReadOnlySpan<T> x, ReadOnlySpan<T> y, Span<T> ans)
            {
                for (var i = 0; i < ans.Length; ++i)
                    ans[i] = ValueOperation.<#=op#>(x[i], y[i]);
            }

<# } #>
*/
        }
    }
}
